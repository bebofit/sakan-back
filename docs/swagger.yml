openapi: 3.0.0
servers:
  - url: 'localhost:3000'
info:
  version: '1.0'
  title: Sakan-Backend
  description: '# These are SakanWallet backend Webservice Endpoints'
  contact:
    name: Abdelrahman Soliman
    email: bebofit@aucegypt.edu
tags:
  - name: User
  - name: Admin
  - name: Client
  - name: Investor
  - name: Property
  - name: Contract
  - name: Add Property Request
  - name: Rent/Buy Property Request

paths:
  ##############################              User APIs                ##################

  /api/user/signup:
    post:
      tags:
        - User
      description: Allows user to signup to app
      operationId: userSignup
      requestBody:
        description: user's info needed to sign-in
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignupResponse'
        '422':
          description: Missing required field(s)
        '409':
          description: Duplicate key
          
  /api/user/email/verify:
    post:
      tags: 
        - User
      description: User verifies email for registeration
      operationId: userVerify
      requestBody:
        description: token needed to verify email
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: '12cb2b7f30d1fc9139883d0039ecab3a35bb380c8db3841d4ec24273c89e67c0'
              required: 
                - token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: null
                  message:
                    type: string
                    example: 'Account Verified'
        '404':
          description: NOT FOUND
        '422':
          description: Token is required
      
  /api/user/login:
    post:
      tags:
        - User
      description: Allow User with correct credentials to login into the application
      operationId: usersLogin
      requestBody:
        description: user's info needed to sign-in
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '401':
          description: Incorrect password
        '404':
          description: User not found
        '422': 
          description: required fields

  /api/user/password/forget:
    post:
      tags:
        - User
      description: Allow Users with correct credentials to change their passwords
      operationId: userForgetPassword
      requestBody:
        description: user can forget his password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'marwanamrhuss@gmail.com'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: 'null'
                  message: 
                    type: string
                    example: "Please Check Your Email"
        '404':
          description: Didn't find user
          
  /api/user/password/reset:
    post:
      tags: 
        - User
      description: Allow Users with correct credentials to reset their passwords
      operationId: userChangePassword
      requestBody:
        description: user can change his password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: 'b638b50b7a4f6282f68db4b072f42632ec0b6f84b5dc986b2a0e76df339a67a8'
                password:
                  type: string
                  example: 'marwanamr3'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: 'null'
                  message: 
                    type: string
                    example: "Password Changed Successfully"
        '404':
          description: Didn't find user
          
  /api/user/wallet:
    get:
      tags: 
        - User
      description: get user wallet data
      operationId: userWallet
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
            required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      value:
                        type: number
                        example: 1000
                      currency:
                        type: string
                        example: 'EGP'
                  message: 
                    type: string
                    example: "User wallet"
        '404':
          description: Didn't find user
          
          
  ##############################              Admin APIs                ##################
  
  /api/admin/login:
    post:
      tags:
        - Admin
      description: Allow Admin with correct credentials to login into the application
      operationId: adminLogin
      requestBody:
        description: admin's info needed to sign-in
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3'
                  message: 
                    type: string
                    example: 'Login Successful'
        '401':
          description: Incorrect password
        '404':
          description: User not found
        '422': 
          description: required fields
          
  /api/admin/property/requests:
    get:
      tags: 
        - Admin
      description: get all add property requests
      operationId: adminRequests
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminPropReqs'
        '401':
          description: Unauthorized
          
  /api/admin/property/add/req:
    post:
      tags:
        - Admin
      description: Allow Admin to respond to add property request
      operationId: adminRespondAdd
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
      requestBody:
        description: add property request id and status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addReqId:
                  type: string
                  example: '5e4b080e13ce055256008f37'
                status:
                  type: string
                  example: 'accepted'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: null
                  message: 
                    type: string
                    example: 'accepted'
        '401':
          description: Unauthorized
        '404':
          description: Request not found
        '422': 
          description: required fields
  
  /api/admin/property/rent/req:
    post:
      tags:
        - Admin
      description: Allow Admin to respond to rent property request
      operationId: adminRespondRent
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
      requestBody:
        description: rent property request id and status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rentReqId:
                  type: string
                  example: '5e4b080e13ce055256008f37'
                status:
                  type: string
                  example: 'accepted'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: null
                  message: 
                    type: string
                    example: 'accepted'
        '401':
          description: Unauthorized
        '404':
          description: Request not found
        '422': 
          description: required fields
          
  
  ###############################             Client APIs               ##################
  
  /api/client/fetch/favorites:
    get:
      tags: 
        - Client
      description: Allow Client to get his favourite properties
      operationId: clientGetFavs
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      favorites:
                        type: array
                        items: 
                          example: Property Id
                  message: 
                    type: string
                    example: 'Favorite List'
        '401':
          description: Unauthorized
          
  /api/client/add/favorite:
    post:
      tags: 
        - Client
      description: Allow Client to add favourite property
      operationId: clientAddFavs
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
      requestBody:
        description: rent property request id and status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                propertyId: 
                  type: string
                  example: '5e24ff34336cda3598fdbb02'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: null
                  message: 
                    type: string
                    example: 'property added'
        '401':
          description: Unauthorized
        '404':
          description: Property not found
        '422': 
          description: required fields
        
  /api/client/remove/favorite:
    delete:
      tags: 
        - Client
      description: Allow Client to delete favourite property (Takes propertyId in request body)
      operationId: clientDeleteFavs
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: null
                  message: 
                    type: string
                    example: 'property deleted'
        '401':
          description: Unauthorized
        '404':
          description: Property not found
        '422': 
          description: required fields
            
  /api/client/reserve:
    post:
      tags: 
        - Client
      description: Allow Admin to respond to rent property request
      operationId: adminRespondRent
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
            
  /api/client/rent:
    post:
      tags: 
        - Client
      description: Allow Admin to respond to rent property request
      operationId: adminRespondRent
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
            
            
            
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
      
         ############### API schemas   ####################

  schemas:
  
  ### SIGNUP ###
    UserSignupRequest:
      type: object
      properties:
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        email:
          type: string
          example: 'joehndoe@gmail.com'
        password:
          type: string
          example: 'marwan123'
        userType:
          type: string
          example: 'client'
        phoneNumber:
          type: string
          example: '01129000112'
      required:
        - firstName
        - lastName
        - email
        - password
        - phoneNumber
        - userType
        
    UserSignupResponse:
      type: object
      properties: 
        data: 
          type: object
          properties:
            wallet:
                type: object
                properties:
                  value: 
                    type: number
                    example: 0
                  currency:
                    type: string
                    example: 'EGP'
            favProps: 
              type: array
              items:
                type: string
            _id:
              type: string
              example: '5e63f1919f6b7c57b4909452'
            governmentId:
              type: string
            isVerified:
              type: boolean
              example: false
            chatList:
              type: array
              items:
                type: string
            isDeleted:
              type: boolean
              example: false
            profileStatus:
              type: number
              example: 0
            resetPasswordToken:
              type: string
            verificationToken:
              type: string
              example: 'f672c13ecc5efeed53e4bebe353fcf8daf1ac36066f987e5c974264e99e6a7d3'
            type:
              type: string
              example: 'Client'
            firstName:
              type: string
              example: 'John'
            lastName:
              type: string
              example: 'Doe'
            email:
              type: string
              example: 'joehndoe@gmail.com'
            password:
              type: string
              example: '$2b$10$XhpSlUW5Cx6fFA7LykSCMOF3CTRvPwbTAKN6liqVnFLQHFVkaMWP6'
            userType:
              type: string
              example: 'client'
            phoneNumber:
              type: string
              example: '01129000112'
        message:
          type: string
          example: 'User Created Successfully'
            
            
  ### LOGIN ###  
    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
          example: 'adham.nabil@gmail.com'
        password:
          type: string
          example: 'marwan444'
      required:
        - username
        - password

    UserLoginResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            token:
              type: string
              example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3'
            userType:
              type: string
              example: 'client'
        message: 
          type: string
          example: 'Login Successful'
  
  ### ADMIN ###
    AdminPropReqs:
      type: object
      properties:
        data: 
          type: array
          items:
            type: object
            example: Add Property Request data
        message: 
          type: string
          example: 'Add Property Requests'
          
    
  
    Property:
      type: object
      properties:
        name:
          type: string
          example: 'asdasfasf'
        
      ############### Lookups schemas   ####################

    user:
      type: object
      properties:
        id:
          type: string
          example: '5e63f1919f6b7c57b4909452'
        userType:
          type: string
          example: 'client'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        email:
          type: string
          example: 'joehndoe@gmail.com'
        password:
          type: string
          example: '$2b$10$XhpSlUW5Cx6fFA7LykSCMOF3CTRvPwbTAKN6liqVnFLQHFVkaMWP6'
        phoneNumber:
          type: string
          example: '01129000112'
        gender:
          type: string
          example: 'male'
      required:
        - firstName
        - lastName
        - email
        - password
        - phoneNumber
        - userType

  parameters:
    userIdParam:
      in: path
      name: userId
      required: true
      schema:
        type: string
      description: User Identification
